// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @unique @default(dbgenerated())
  firstName     String
  lastName      String
  email         String     @unique
  role          Role       @default(user)
  token         Token?
  playlists     Playlist[]
  emailVerified Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  password      String
}

model Token {
  id        String    @id @unique @default(dbgenerated())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @unique
  token     Int
  type      TokenType
  payload   String?
  expired   Boolean
  expireAt  DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Artist {
  id        String   @id @unique @default(dbgenerated())
  name      String   @unique
  bio       String
  songs     Song[]
  albums    Album[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song {
  id         String   @id @unique @default(dbgenerated())
  title      String
  artist     Artist   @relation(fields: [artistId], references: [id])
  artistId   String
  genre      String
  duration   Int
  fileUrl    String
  coverImage String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Playlist {
  id        String   @id @unique @default(dbgenerated())
  title     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Album {
  id          String   @id @unique @default(dbgenerated())
  title       String
  artist      Artist   @relation(fields: [artistId], references: [id])
  artistId    String
  releaseDate DateTime
  coverPhoto  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  admin
  user
}

enum TokenType {
  VerifyEmail
  ResetPassword
}
